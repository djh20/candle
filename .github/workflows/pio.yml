name: PlatformIO CI

on: [push, pull_request]

env:
  FIRMWARE_VERSION: ${{ github.ref }}
  CREATE_ARTIFACT: ${{ startsWith(github.ref, 'refs/tags/') }}

jobs:
  get_default_envs:
    name: Gather Environments
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Get Default Environments
        id: envs
        run: |
          echo "environments=$(pio project config --json-output | jq -cr '.[0][1][0][1]')" >> $GITHUB_OUTPUT

    outputs:
      environments: ${{ steps.envs.outputs.environments }}

  build:
    name: Build Environments
    runs-on: ubuntu-latest
    needs: get_default_envs
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJSON(needs.get_default_envs.outputs.environments) }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
          
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PlatformIO Core
        run: pip install --upgrade platformio

      - name: Build Firmware
        run: pio run -e ${{ matrix.environment }}

      - name: Generate Firmware Name
        if: env.CREATE_ARTIFACT == 'true'
        run: echo "FIRMWARE_NAME=candle_${{ env.FIRMWARE_VERSION }}_${{ matrix.environment }}" >> "$GITHUB_ENV"

      - name: Move Firmware
        if: env.CREATE_ARTIFACT == 'true'
        run: |
          mkdir ./dist
          mv ./.pio/build/${{ matrix.environment }}/firmware.bin ./dist/${{ env.FIRMWARE_NAME }}.bin
        
      - name: Generate Firmware Checksum
        if: env.CREATE_ARTIFACT == 'true'
        working-directory: ./dist
        run: md5sum -b ${{ env.FIRMWARE_NAME }}.bin | awk '{ printf $1 }' >> ${{ env.FIRMWARE_NAME }}.md5
      
      - uses: actions/upload-artifact@v4
        if: env.CREATE_ARTIFACT == 'true'
        with:
          name: firmware-${{ matrix.environment }}
          path: ./dist/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [get_default_envs, build]
    if: github.ref_name == '*.*.*'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./dist
      
      - name: Create Release Draft
        uses: softprops/action-gh-release@v2
        with:
          draft: True
          generate_release_notes: True
          files: |
            ./dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}